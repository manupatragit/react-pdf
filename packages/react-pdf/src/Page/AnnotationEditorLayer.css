/* Copyright 2022 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@import url('./DrawLayer.css');

:root {
  --outline-width: 2px;
  --outline-color: #0060df;
  --outline-around-width: 1px;
  --outline-around-color: #f0f0f4;
  --hover-outline-around-color: var(--outline-around-color);
  --focus-outline: solid var(--outline-width) var(--outline-color);
  --unfocus-outline: solid var(--outline-width) transparent;
  --focus-outline-around: solid var(--outline-around-width) var(--outline-around-color);
  --hover-outline-color: #8f8f9d;
  --hover-outline: solid var(--outline-width) var(--hover-outline-color);
  --hover-outline-around: solid var(--outline-around-width) var(--hover-outline-around-color);
  --freetext-line-height: 1.35;
  --freetext-padding: 2px;
  --resizer-bg-color: var(--outline-color);
  --resizer-size: 8px;
  --resizer-shift: calc(
    0px - (var(--outline-width) + var(--resizer-size)) / 2 - var(--outline-around-width)
  );
  --editorFreeText-editing-cursor: text;
  --editorText-editing-cursor: crosshair;
  --editorText-sticky-note-size: 25px;
  /*#if COMPONENTS*/
  --editorInk-editing-cursor: pointer;
  --editorSquare-editing-cursor: crosshair;
  /*#else*/
  --editorInk-editing-cursor: svg-load(../images/cursor-editorInk.svg) 0 16, pointer;
  --editorSquare-editing-cursor: svg-load(../images/cursor-editorSquare.svg) 25 25, crosshair;
  /*#endif*/
}

@media (min-resolution: 1.1dppx) {
  :root {
    /*#if !COMPONENTS*/
    --editorFreeText-editing-cursor: svg-load(../images/cursor-editorFreeText.svg) 0 16, text;
    /*#endif*/
  }
}

@media screen and (forced-colors: active) {
  :root {
    --outline-color: CanvasText;
    --outline-around-color: ButtonFace;
    --resizer-bg-color: ButtonText;
    --hover-outline-color: Highlight;
    --hover-outline-around-color: SelectedItemText;
  }
}

[data-editor-rotation='90'] {
  transform: rotate(90deg);
}

[data-editor-rotation='180'] {
  transform: rotate(180deg);
}

[data-editor-rotation='270'] {
  transform: rotate(270deg);
}

.annotationEditorLayer {
  background: transparent;
  position: absolute;
  inset: 0;
  font-size: calc(100px * var(--scale-factor));
  transform-origin: 0 0;
  cursor: auto;
  z-index: 4;
}

.annotationEditorLayer.waiting {
  content: '';
  cursor: wait;
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
}

.annotationEditorLayer.disabled {
  pointer-events: none;
}

.annotationEditorLayer.freetextEditing {
  cursor: var(--editorFreeText-editing-cursor);
}

.annotationEditorLayer.textEditing {
  cursor: var(--editorText-editing-cursor);
}

.annotationEditorLayer.inkEditing {
  cursor: var(--editorInk-editing-cursor);
}

.annotationEditorLayer.squareEditing {
  cursor: var(--editorSquare-editing-cursor);
}

.textEditor,
.squareEditor {
  /* Enables interaction even when annotation editor layer is disabled */
  pointer-events: auto;
  /* Required for accurate resizing calculations */
  box-sizing: content-box;
}

.textEditor {
  box-shadow: 0px 9px 28px 8px #0000000d;
  border-radius: 8px;
  padding: 0 !important;

  .sticky-note-large {
    width: 265px;
    display: none;
    border-radius: inherit;

    &.show {
      display: block;
    }

    .sticky-note-action-bar {
      height: var(--editorText-sticky-note-size);
      border-radius: inherit;
    }

    & .internal {
      padding: 0 12px 12px;
      overflow-y: auto !important;
      width: calc(100% - 24px);
      min-height: 128px;
      max-height: 212px;
      border-radius: inherit;
      word-break: break-all;
      scrollbar-width: thin;
      scrollbar-color: rgb(121 121 123) transparent;
    }

    &.internal::-webkit-scrollbar-thumb {
      background-color: rgb(121 121 123);
      border-radius: 10px;
    }

    &.internal::-webkit-scrollbar-track {
      background-color: transparent;
    }

    &.internal::-webkit-scrollbar-button {
      display: none; /* Hide the scrollbar buttons */
    }
  }

  .sticky-note-small {
    box-shadow: 0px 2px 4px 0px #00000005;

    width: var(--editorText-sticky-note-size);
    height: var(--editorText-sticky-note-size);
    display: none;

    &.show {
      display: flex;
    }

    svg {
      flex-grow: 1;
    }
  }
}

.annotationEditorLayer :is(.freeTextEditor, .inkEditor, .textEditor, .squareEditor, .stampEditor) {
  position: absolute;
  background: transparent;
  z-index: 1;
  transform-origin: 0 0;
  cursor: auto;
  max-width: 100%;
  max-height: 100%;
  border: var(--unfocus-outline);

  &.selectedEditor {
    border: var(--focus-outline);
    outline: var(--focus-outline-around);
    z-index: 99 !important;
    &::before {
      /*
         This is a workaround for the lack of support for stripes(...) (see
         https://drafts.csswg.org/css-images-4/#stripes).
         The outline should be composed of 1px white, 2px blue and 1px white.
         This could be achieved in different ways:
           - using a linear-gradient;
           - using a box-shadow;
           - using an outline on the selected element and an outline+border on
             the ::before pseudo-element.
         All these options lead to incorrect rendering likely due to rounding
         issues.
         That said it doesn't mean that the current is ideal, but it's the best
         we could come up with for the moment.
         One drawback of this approach is that we use a border on the selected
         element which means that we must take care of it when positioning the
         div in js (see AnnotationEditor._borderLineWidth in editor.js).
       */
      content: '';
      position: absolute;
      inset: 0;
      border: var(--focus-outline-around);
      pointer-events: none;
    }
  }

  &:hover:not(.selectedEditor) {
    border: var(--hover-outline);
    outline: var(--hover-outline-around);

    &::before {
      content: '';
      position: absolute;
      inset: 0;
      border: var(--focus-outline-around);
    }
  }
}

.annotationEditorLayer :is(.freeTextEditor, .inkEditor, .squareEditor, .stampEditor) {
  &.draggable.selectedEditor {
    cursor: move;
  }
}

.annotationEditorLayer
  :is(
    .freeTextEditor,
    .inkEditor,
    .textEditor,
    .squareEditor,
    .stampEditor,
    .highlightEditor,
    .underlineEditor,
    .linkNodeEditor,
    .strikeoutEditor,
    .tempHighlightEditor
  ) {
  .editToolbar {
    --editor-toolbar-vert-offset: 6px;
    pointer-events: auto;
    position: absolute;
    box-shadow: 0px 6px 16px 0px #00000014;

    &.hidden {
      display: none;
    }
  }
}

.linkNodeEditor.hidden {
  display: none;
}

.annotationEditorLayer .freeTextEditor,
.annotationEditorLayer .textEditor {
  padding: calc(var(--freetext-padding) * var(--scale-factor));
  width: auto;
  height: auto;
  touch-action: none;
}

.annotationEditorLayer .freeTextEditor .internal,
.annotationEditorLayer .textEditor .internal {
  background: transparent;
  border: none;
  inset: 0;
  overflow: visible;
  white-space: pre-wrap;
  font: 14px sans-serif;
  line-height: var(--freetext-line-height);
  user-select: none;
}

.annotationEditorLayer .freeTextEditor .overlay {
  position: absolute;
  display: none;
  background: transparent;
  inset: 0;
  width: 100%;
  height: 100%;
}

.annotationEditorLayer .freeTextEditor .overlay.enabled {
  display: block;
}

.annotationEditorLayer .textEditor .overlay {
  position: absolute;
  display: block;
  background: transparent;
  inset: 0;
  width: 100%;
  height: var(--editorText-sticky-note-size);
  cursor: move;
  max-width: calc(100% - var(--editorText-sticky-note-size));
  min-width: var(--editorText-sticky-note-size);
}

.annotationEditorLayer .freeTextEditor .internal:empty::before,
.annotationEditorLayer .textEditor .internal:empty::before {
  content: attr(default-content);
  color: gray;
}

.annotationEditorLayer .freeTextEditor .internal:focus,
.annotationEditorLayer .textEditor .internal:focus {
  outline: none;
  user-select: auto;
}

.annotationEditorLayer .inkEditor,
.annotationEditorLayer .squareEditor {
  width: 100%;
  height: 100%;
}

.annotationEditorLayer .inkEditor.editing,
.annotationEditorLayer .squareEditor.editing {
  cursor: inherit;
}

.annotationEditorLayer .inkEditor .inkEditorCanvas,
.annotationEditorLayer .squareEditor .squareEditorCanvas {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  touch-action: none;
}

.annotationEditorLayer .stampEditor {
  width: auto;
  height: auto;
}

.annotationEditorLayer .stampEditor canvas {
  width: 100%;
  height: 100%;
}

.annotationEditorLayer {
  :is(.freeTextEditor, .textEditor, .inkEditor, .squareEditor, .stampEditor) {
    & > .resizers {
      position: absolute;
      inset: 0;

      &.hidden {
        display: none;
      }

      & > .resizer {
        width: var(--resizer-size);
        height: var(--resizer-size);
        background: content-box var(--resizer-bg-color);
        border: var(--focus-outline-around);
        border-radius: 2px;
        position: absolute;
        z-index: 1;

        &.topLeft {
          top: var(--resizer-shift);
          left: var(--resizer-shift);
        }

        &.topMiddle {
          top: var(--resizer-shift);
          left: calc(50% + var(--resizer-shift));
        }

        &.topRight {
          top: var(--resizer-shift);
          right: var(--resizer-shift);
        }

        &.middleRight {
          top: calc(50% + var(--resizer-shift));
          right: var(--resizer-shift);
        }

        &.bottomRight {
          bottom: var(--resizer-shift);
          right: var(--resizer-shift);
        }

        &.bottomMiddle {
          bottom: var(--resizer-shift);
          left: calc(50% + var(--resizer-shift));
        }

        &.bottomLeft {
          bottom: var(--resizer-shift);
          left: var(--resizer-shift);
        }

        &.middleLeft {
          top: calc(50% + var(--resizer-shift));
          left: var(--resizer-shift);
        }
      }
    }
  }

  &[data-main-rotation='0'] :is([data-editor-rotation='0'], [data-editor-rotation='180']),
  &[data-main-rotation='90'] :is([data-editor-rotation='270'], [data-editor-rotation='90']),
  &[data-main-rotation='180'] :is([data-editor-rotation='180'], [data-editor-rotation='0']),
  &[data-main-rotation='270'] :is([data-editor-rotation='90'], [data-editor-rotation='270']) {
    & > .resizers > .resizer {
      &.topLeft,
      &.bottomRight {
        cursor: nwse-resize;
      }

      &.topMiddle,
      &.bottomMiddle {
        cursor: ns-resize;
      }

      &.topRight,
      &.bottomLeft {
        cursor: nesw-resize;
      }

      &.middleRight,
      &.middleLeft {
        cursor: ew-resize;
      }
    }
  }

  &[data-main-rotation='0'] :is([data-editor-rotation='90'], [data-editor-rotation='270']),
  &[data-main-rotation='90'] :is([data-editor-rotation='0'], [data-editor-rotation='180']),
  &[data-main-rotation='180'] :is([data-editor-rotation='270'], [data-editor-rotation='90']),
  &[data-main-rotation='270'] :is([data-editor-rotation='180'], [data-editor-rotation='0']) {
    & > .resizers > .resizer {
      &.topLeft,
      &.bottomRight {
        cursor: nesw-resize;
      }

      &.topMiddle,
      &.bottomMiddle {
        cursor: ew-resize;
      }

      &.topRight,
      &.bottomLeft {
        cursor: nwse-resize;
      }

      &.middleRight,
      &.middleLeft {
        cursor: ns-resize;
      }
    }
  }

  &
    :is(
      [data-main-rotation='0'] [data-editor-rotation='90'],
      [data-main-rotation='90'] [data-editor-rotation='0'],
      [data-main-rotation='180'] [data-editor-rotation='270'],
      [data-main-rotation='270'] [data-editor-rotation='180']
    ) {
    .editToolbar {
      rotate: 270deg;

      &:dir(ltr) {
        inset-inline-end: calc(0px - var(--editor-toolbar-vert-offset));
        inset-block-start: 0;
      }

      &:dir(rtl) {
        inset-inline-end: calc(100% + var(--editor-toolbar-vert-offset));
        inset-block-start: 0;
      }
    }
  }

  &
    :is(
      [data-main-rotation='0'] [data-editor-rotation='180'],
      [data-main-rotation='90'] [data-editor-rotation='90'],
      [data-main-rotation='180'] [data-editor-rotation='0'],
      [data-main-rotation='270'] [data-editor-rotation='270']
    ) {
    .editToolbar {
      rotate: 180deg;
      inset-inline-end: 100%;
      inset-block-start: calc(0pc - var(--editor-toolbar-vert-offset));
    }
  }

  &
    :is(
      [data-main-rotation='0'] [data-editor-rotation='270'],
      [data-main-rotation='90'] [data-editor-rotation='180'],
      [data-main-rotation='180'] [data-editor-rotation='90'],
      [data-main-rotation='270'] [data-editor-rotation='0']
    ) {
    .editToolbar {
      rotate: 90deg;

      &:dir(ltr) {
        inset-inline-end: calc(100% + var(--editor-toolbar-vert-offset));
        inset-block-start: 100%;
      }

      &:dir(rtl) {
        inset-inline-start: calc(0px - var(--editor-toolbar-vert-offset));
        inset-block-start: 0;
      }
    }
  }
}

.annotationEditorLayer {
  &[data-main-rotation='0'] {
    .highlightEditor > .editToolbar,
    .underlineEditor > .editToolbar,
    .strikeoutEditor > .editToolbar,
    .linkNodeEditor > .editToolbar {
      rotate: 0deg;
    }
  }

  &[data-main-rotation='90'] {
    .highlightEditor > .editToolbar,
    .underlineEditor > .editToolbar,
    .strikeoutEditor > .editToolbar,
    .linkNodeEditor > .editToolbar {
      rotate: 270deg;
    }
  }

  &[data-main-rotation='180'] {
    .highlightEditor > .editToolbar,
    .underlineEditor > .editToolbar,
    .strikeoutEditor > .editToolbar,
    .linkNodeEditor > .editToolbar {
      rotate: 180deg;
    }
  }

  &[data-main-rotation='270'] {
    .highlightEditor > .editToolbar,
    .underlineEditor > .editToolbar,
    .strikeoutEditor > .editToolbar,
    .linkNodeEditor > .editToolbar {
      rotate: 90deg;
    }
  }

  .highlightEditor,
  .underlineEditor,
  .strikeoutEditor,
  .linkNodeEditor {
    position: absolute;
    background: transparent;
    z-index: 1;
    transform-origin: 0 0;
    cursor: auto;
    max-width: 100%;
    max-height: 100%;
    border: none;
    outline: none;
    pointer-events: none;
    transform: none;

    .internal {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: auto;
    }

    &.disabled .internal {
      pointer-events: none;
    }

    &.selectedEditor {
      z-index: 99 !important;
      .internal {
        cursor: pointer;
      }
    }

    .editToolbar {
      --editor-toolbar-colorpicker-arrow-image: svg-load(../images/toolbarButton-menuArrow.svg);

      transform-origin: center !important;
    }
  }

  .tempHighlightEditor {
    position: absolute;
    background: transparent;
    z-index: 1;
    transform-origin: 0 0;
    cursor: auto;
    max-width: 100%;
    max-height: 100%;
    border: none;
    outline: none;
    pointer-events: none;
    transform: none;

    .internal {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: auto;
    }

    &.disabled .internal {
      pointer-events: none;
    }

    &.selectedEditor {
      .internal {
        cursor: pointer;
      }
    }
  }
}

.editorParamsToolbar:has(#highlightParamsToolbarContainer) {
  padding: unset;
}

#highlightParamsToolbarContainer {
  height: auto;
  padding-inline: 10px;
  padding-block: 10px 16px;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
}
